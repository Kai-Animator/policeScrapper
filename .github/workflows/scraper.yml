name: Run Scraper

on:
  schedule:
    - cron: "*/15 * * * *" # Run every 15 minutes
  workflow_dispatch: # Allow manual trigger for testing
  # Explicitly NOT running on push/pull_request

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Cancel any running jobs if a new one is triggered

jobs:
  test-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Debug LINE Credentials
        run: |
          echo "=== LINE Credentials Debug ==="
          if [ -n "${{ secrets.LINE_CHANNEL_TOKEN }}" ]; then
            echo "LINE_CHANNEL_TOKEN is set"
            echo "LINE_CHANNEL_TOKEN length: ${#LINE_CHANNEL_TOKEN}"
          else
            echo "LINE_CHANNEL_TOKEN is not set"
            exit 1
          fi

          if [ -n "${{ secrets.LINE_USER_ID }}" ]; then
            echo "LINE_USER_ID is set"
            echo "LINE_USER_ID length: ${#LINE_USER_ID}"
          else
            echo "LINE_USER_ID is not set"
            exit 1
          fi
          echo "=== Debug Complete ==="

      - name: Setup log directories
        id: setup_logs
        run: |
          echo "Creating log directories..."
          mkdir -p logs
          chmod 750 logs

          # Set run ID
          run_id=$(date +%Y%m%d_%H%M%S)
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT

          # Create run-specific directory
          mkdir -p "logs/${run_id}"
          chmod 750 "logs/${run_id}"

          # Create today's log file
          today=$(date +%Y-%m-%d)
          touch "logs/${today}.log"
          chmod 640 "logs/${today}.log"

          echo "Log directories created successfully"
          ls -la logs/

      - name: Test LINE Notification
        env:
          LINE_CHANNEL_TOKEN: ${{ secrets.LINE_CHANNEL_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        run: |
          run_id="${{ steps.setup_logs.outputs.run_id }}"
          log_file="logs/${run_id}/test.log"

          echo "Using log file: ${log_file}"
          touch "${log_file}"

          {
            echo "=== LINE Notification Test Started at $(date) ==="
            echo "Run ID: ${run_id}"
            echo "GitHub Run Number: ${{ github.run_number }}"
            echo "Triggered by: ${{ github.event_name }}"
            echo "========================================"
            
            go run cmd/scraper/main.go notify-test
            test_exit_code=$?
            
            echo "========================================="
            echo "=== LINE Notification Test Completed at $(date) ==="
            echo "Exit code: ${test_exit_code}"
            
            exit ${test_exit_code}
          } 2>&1 | tee "${log_file}"

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_number }}
          path: logs/
          retention-days: 90

  scrape:
    needs: test-notification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Install Chrome
        run: |
          echo "Installing Chrome dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libasound2t64 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libatspi2.0-0 \
            libcairo2 \
            libcups2 \
            libdbus-1-3 \
            libdrm2 \
            libexpat1 \
            libgbm1 \
            libglib2.0-0 \
            libnspr4 \
            libnss3 \
            libpango-1.0-0 \
            libx11-6 \
            libxcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxrandr2 \
            xdg-utils \
            libu2f-udev \
            libvulkan1 \
            fonts-liberation \
            wget

          echo "Adding Chrome repository..."
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update

          echo "Installing Chrome..."
          sudo apt-get install -y google-chrome-stable

          echo "Chrome version:"
          google-chrome --version

      - name: Setup log directories
        id: setup_logs
        run: |
          echo "Creating log directories..."
          mkdir -p logs
          chmod 750 logs

          # Set run ID
          run_id=$(date +%Y%m%d_%H%M%S)
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT

          # Create run-specific directory
          mkdir -p "logs/${run_id}"
          chmod 750 "logs/${run_id}"

          # Create today's log file
          today=$(date +%Y-%m-%d)
          touch "logs/${today}.log"
          chmod 640 "logs/${today}.log"

          echo "Log directories created successfully"
          ls -la logs/

      - name: Run Scraper
        env:
          LINE_CHANNEL_TOKEN: ${{ secrets.LINE_CHANNEL_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        run: |
          run_id="${{ steps.setup_logs.outputs.run_id }}"
          log_file="logs/${run_id}/scraper.log"

          echo "Using log file: ${log_file}"
          touch "${log_file}"

          {
            echo "=== Scraper Run Started at $(date) ==="
            echo "Run ID: ${run_id}"
            echo "GitHub Run Number: ${{ github.run_number }}"
            echo "Triggered by: ${{ github.event_name }}"
            echo "========================================"
            
            go run cmd/scraper/main.go 2>&1
            scraper_exit_code=$?
            
            echo "========================================="
            echo "=== Scraper Run Completed at $(date) ==="
            echo "Exit code: ${scraper_exit_code}"
            
            exit ${scraper_exit_code}
          } 2>&1 | tee "${log_file}"

      - name: Upload run logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-logs-${{ github.run_number }}
          path: logs/
          retention-days: 90

      - name: Clean old logs
        if: always()
        run: |
          echo "Cleaning old logs..."
          # Only attempt to clean if the directory exists
          if [ -d "logs" ]; then
            find logs/ -type f -mtime +90 -delete
            find logs/ -type d -empty -delete
          fi
